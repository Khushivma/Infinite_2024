Visual Studio : IDE (Integrated Development Environment)
                Intellisense Support (using Reflection)

CSharp : Is a modern, general purpose object oreinted programming language by Microsoft
         Anders Hejlsberg and his team developed C# during Dot Net Framework Development

Namespaces : A Logical way to organize our programs
             It is a clolection of Classes,Interfaces,Events,Delegates,Structures,Enums, and also other Namespaces
             Helps in avoiding name clashes

Data Types : Are basically either
           a) Value Types - Types that have data directly (All primitive/systemic/fundamental datatypes- char,int,float,double,long,byte etc..)

  Ex: character c='a'( a variable c of character type holds a value 'a')

    Value Types are derived from System.ValueType
    Value type variables store the data
    Value types are allocated in stack memory

           b) Reference Types - Types that donot have data directly, instead have the reference to the location where data is (All objects of classes,interfaces,delegates,arrays etc.)
           - They are allocated in heap memory
           
   Ex :  string str; str="Hello";

Literals in C# :
  String - set of characters - Hello World
  Real - numbers with precision - 10.5
  Integer - numbers  - 1234
  Null   -- Unknown  or missing info  -  '/0'
  Boolean - true or false 
  Character - any one character - 'a' or '1'

Data/Type Conversions:

  Implicit Conversions : are conversions that are type safe
                         handled by the compiler automatically
                         smaller type to larger type 
    Example : integer data to float data
                         

  Explicit Conversions : are conversions done by users using predefind functions on conversion operators(cast)
                ToInt16(), ToInt32(), ToChar(), ToString(), etc...
                Parse(), tyrParse()
                cast- (datatype)

Boxing and Unboxing :

   Value type to Reference type is known as Boxing
   Reference type to Value type is known as Unboxing


Nullables: C# provides a special datatype, the nullable types, to which you can assign normal range of values as well as null values

-It bridges the difference between c# types and database types
- Transformation of nulls and non nulls

Value types like reference types can also be assigned null with the help of nullable operator '?'
We can use null coalescing operator '??' to give the effect of ternary operations using null


Instance Functions and Static Functions
-------------------------------------------

Instance Functions/Methods : are functions that require an object of the class to be called/invoked. They have public access specifications

Static Methods : are methods that have static keyword(modifier) which cannot be invoked using an object of the class. Instead they are called using the name of the class.

Programming Constructs
  Selection Statements  :If, switch
  Control Statements/Iteration  : Loops
      Initial Value, Condition, For how long
       while
       do while
       for
       foreach
  Jump Statements 
       break
       continue
       goto
       return
       throw

Operators

   Arithmetic  (+,-,*,/,%)
   Relational  (<,>,<=,>=,==,<>,!)
   Logical     (not,and,or)
   Assignment  (=)
   Misc.  
      sizeof(), typeof(), ?, is, as, ?? etc. 

Arrays and Strings

Arrays : Array is a collection of values of same data type. It is a continuous memory allocation
   They are of 3 types : One-Diemension, 2 Dimension/Multi Dimension, Jagged 
   Arrays are operated using an Index or subscript reference (memory address)
   Hence arrays are known as reference type datatype

Array Instantiation : 
   Datatype [] Arrayname = new Datatype[size]
   Datatype : Specifies what type of data is stored
   Arrayname : indicates the name of the array
   new : keyword that allocates memory at the runtime
   Size : indicates number of elements

  int [] arr1 = new int[5];
  int [] arr2 = new int[5]{1,3,5,7,9};
  int [] arr3 = new int[]{10,20,30,40,50,60};
  
jagged arrays : are also called array of arrays
                An element of a jagged array itself is an array
                Size indicates no.of arrays stored in a jagged array

int[][] jarray = new int[3][]; - here 3 represents  no.of arrays in the Jagged array (this can be tested using Length property of the array)
 
Strings in C# : 
   strings are a collection of characters 
   they are allocated in the heap memory
   they are predefined reference type
   they have fixed size
   they are immutable
   string memory cannot be changed dynamically
      string str="abc";
      string s1="C:\\Banu\\Infinite\\B3";
      string s2=s1;
      string s3= new string(char[] c)

StringBuilder Class of C# : They are like strings, but are mutable


OOP programming
